{"version":3,"sources":["index.js"],"names":["EventBus","events","eventType","func","context","push","args","event","length","map","obj","apply","reduceRight","prev","current"],"mappings":";AAuHeA,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA1GTA,IAAAA,EA0GSA,WAzGG,SAAA,IAAA,EAAA,KAAA,GACLC,KAAAA,OAAS,GAwGPD,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,KAhFRE,MAAAA,SAAAA,EAAWC,GAAMC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KACrB,KAAKH,OAAOC,KACRD,KAAAA,OAAOC,GAAa,IAExBD,KAAAA,OAAOC,GAAWG,KAAK,CAAEF,KAAAA,EAAMC,QAAAA,MA4E7BJ,CAAAA,IAAAA,UA9DHE,MAAAA,SAAAA,GAAcI,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,EAAA,GAAA,UAAA,GACHC,IAAAA,EAAU,KAAKN,OAA3BC,GACJK,GAA0B,IAAjBA,EAAMC,QAGpBD,EAAME,IAAI,SAACC,GAEAA,OADPA,EAAIP,KAAKQ,MAAMD,EAAIN,QAASE,GACrBI,MAuDJV,CAAAA,IAAAA,MAxCPE,MAAAA,SAAAA,EAAWC,GACUI,IAAAA,EAAU,KAAKN,OAA3BC,GACJK,IAIAN,KAAAA,OAAOC,GAAaK,EAAMK,YAAY,SAACC,EAAMC,GAIvCD,OAHHC,EAAQX,OAASA,GACjBU,EAAKR,KAAKS,GAEPD,GACR,OA6BIb,CAAAA,IAAAA,QAlBLE,MAAAA,SAAAA,GACG,KAAKD,OAAOC,KAGZD,KAAAA,OAAOC,GAAa,MAclBF,CAAAA,IAAAA,WALA,MAAA,WACFC,KAAAA,OAAS,OAIPD,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA","file":"index.umd.map","sourceRoot":"../src","sourcesContent":["/**\n * @description Simple library to trigger custom events\n * @example\n * import EventBus from '@docomodigital/js-eventbus';\n *\n * const Bus = new EventBus();\n * const callback = (args) => {\n *   // Do something...\n * };\n *\n * Bus.on('customEvent', callback);\n * Bus.trigger('customEvent', {foo: 'bar'}); // callback is called\n */\nclass EventBus {\n    constructor() {\n        this.events = {};\n    }\n\n    /**\n     * @description Register a new callback for the specified custom event\n     * @param {String} eventType - if not exists it defines a new one\n     * @param {Function} func - the function to call when the event is triggered\n     * @param {Object} [context=null] - the 'this' applied to the function. default null,\n     * this will not work with arrow functions.\n     * @return {void}\n     * @example\n     * const Bus = new EventBus();\n     * Bus.on('customEvent', (args) => {\n     *     // Do something...\n     * });\n     *\n     * const ctx = {foo: 'bar'}\n     * Bus.on('customEvent', (args) => {\n     *     console.log(this.foo) // Uncaught TypeError: Cannot read property 'foo' of undefined\n     * }, ctx);\n     * Bus.on('customEvent', function(args) {\n     *     console.log(this.foo) // 'bar'\n     * }, ctx);\n     */\n    on(eventType, func, context = null) {\n        if (!this.events[eventType]) {\n            this.events[eventType] = [];\n        }\n        this.events[eventType].push({ func, context });\n    }\n\n    /**\n     * @description Trigger the specified event, pass the other arguments to the callbacks\n     * @param {String} eventType - the eventType to trigger. if not exists nothing happens\n     * @param {*} args - Arguments to pass to the eventType callbacks\n     * @return {void}\n     * @example\n     * const Bus = new EventBus();\n     * const cb = (args) => {}\n     * Bus.on('customEvent', cb);\n     * Bus.trigger('customEvent'); //cb is called\n     */\n    trigger(eventType, ...args) {\n        const { [eventType]: event } = this.events;\n        if (!event || event.length === 0) {\n            return;\n        }\n        event.map((obj) => {\n            obj.func.apply(obj.context, args);\n            return obj;\n        });\n    }\n\n    /**\n     * @description Remove the specified callback from the specified event\n     * @param {String} eventType - the eventType\n     * @param {Function} func - the reference of the function to remove from the list of function\n     * @return {void}\n     * @example\n     *const cb = (args) => {};\n     * Bus.on('evt', cb);\n     * Bus.off('evt', cb);\n     * Bus.trigger('evt') // cb is not called\n     */\n    off(eventType, func) {\n        const { [eventType]: event } = this.events;\n        if (!event) {\n            return;\n        }\n\n        this.events[eventType] = event.reduceRight((prev, current) => {\n            if (current.func !== func) {\n                prev.push(current);\n            }\n            return prev;\n        }, []);\n    }\n\n    /**\n     * @description Remove all the callbacks from the specified event\n     * if the event not exists nothing happens\n     * @param {String} eventType - the event type to clear\n     * @return {void}\n     * @example\n     * Bus.clear('evt');\n     */\n    clear(eventType) {\n        if (!this.events[eventType]) {\n            return;\n        }\n        this.events[eventType] = [];\n    }\n\n    /**\n     * @description Remove all the callbacks from all the events\n     * @return {void}\n     * @example\n     * Bus.clearAll();\n     */\n    clearAll() {\n        this.events = {};\n    }\n}\n\nexport default EventBus;\n"]}